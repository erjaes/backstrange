# app.py - Backend for Stranger Things Tweet Game
from flask import Flask, request, jsonify
from flask_cors import CORS
from datetime import datetime
import random

app = Flask(__name__)
CORS(app)  # Allow requests from frontend

# Mock database to store tweets and relationships
tweets = []  # Store all tweets and responses
CHARACTERS = {
    "Mike": {"mood": "neutral", "relationship": 0},
    "Eleven": {"mood": "curious", "relationship": 0},
    "Dustin": {"mood": "excited", "relationship": 0},
    "Hopper": {"mood": "grumpy", "relationship": 0},
    "Max": {"mood": "defensive", "relationship": 0}
}

# Generate in-character responses based on relationship and content
def generate_response(character, content):
    relationship = CHARACTERS[character]["relationship"]
    mood = CHARACTERS[character]["mood"]

    if "love" in content.lower() and relationship > 5:
        return f"{character} smiles: 'I think I feel the same.'"
    elif "how are you" in content.lower():
        return f"{character}: 'I'm feeling {mood} today.'"
    elif relationship < -5:
        return f"{character}: 'I don't think we should talk anymore.'"
    else:
        responses = [
            f"{character}: 'That's interesting! Tell me more.'",
            f"{character}: 'Hmm... I didn't expect that.'",
            f"{character} ponders: 'You're full of surprises.'"
        ]
        return random.choice(responses)

# API to send a tweet and get character response
@app.route('/tweet', methods=['POST'])
def tweet():
    data = request.json
    user = data["user"]
    character = data["character"]
    content = data["content"]

    # Update relationship score
    if "love" in content.lower():
        CHARACTERS[character]["relationship"] += 2
    elif "hate" in content.lower():
        CHARACTERS[character]["relationship"] -= 3
    else:
        CHARACTERS[character]["relationship"] += 1

    # Save user tweet
    tweet = {
        "user": user,
        "character": character,
        "content": content,
        "timestamp": datetime.now().isoformat()
    }
    tweets.append(tweet)

    # Generate character response
    response = generate_response(character, content)
    response_tweet = {
        "user": character,
        "content": response,
        "timestamp": datetime.now().isoformat()
    }
    tweets.append(response_tweet)

    return jsonify(response_tweet), 200

# API to retrieve all tweets
@app.route('/tweets', methods=['GET'])
def get_tweets():
    return jsonify(tweets), 200

# Run the Flask app
if __name__ == '__main__':
    app.run(debug=True)
